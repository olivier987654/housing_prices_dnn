# -*- coding: utf-8 -*-
"""HousingDNN.pynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wfr_GWaaqpBbgzg_Y4kjnKUD4JKs67_B
"""

import keras
import numpy as np
import pandas as pd

df = pd.read_csv('/content/HousingPrices.csv')
df.head() # Head is a function to prind the first values of the dataset.

# Set the X value
# The X value is going to be assigned to all the value except the sales price.
# The Y value is going to be assigned to sale price.
X = df.drop(columns=['SalePrice'])
Y = df[['SalePrice']]

# Building the model.

model = keras.Sequential()

# This step, we are going to add some layers of neurons

#First Layer.

model.add(keras.layers.Dense(8, activation='relu', input_shape=(8,))) # Relu is a activation method that works great with DNN, *** don't forget the coma after the 8 :)

# Second Layer

model.add(keras.layers.Dense(8, activation='relu')) # No input shape because this is not the input neurons.

# Third Layer

model.add(keras.layers.Dense(1)) # size of 1 because we want to output the sale price, which is only 1 value

model.compile(optimizer='adam', loss='mean_squared_error')

# Fit the model 

model.fit(X, Y, epochs=30, callbacks=[keras.callbacks.EarlyStopping(patience=5)]) # This line is use to train the model using, you can expiriment with the patience value

# Test the model on the Test Data which is going to be an array

test_data = np.array([2003,	854,	1710,	2, 	1, 	3, 	8,	2008]) # In this case, its going to be the first House in the .CSV

# Print the prediction based on the test data

print(model.predict(test_data.reshape(1, 8), batch_size=1))

# This cell is going to give us the ability to saves the model

model.save('housing_model.h5')